/*
 * This file is generated by jOOQ.
 */
package generated.cf.async.guice.tables.daos;


import generated.cf.async.guice.tables.Somethingcomposite;
import generated.cf.async.guice.tables.records.SomethingcompositeRecord;

import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;
import io.vertx.core.json.JsonObject;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record2;


import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO;
import io.github.jklingsporn.vertx.jooq.completablefuture.async.AsyncCompletableFutureQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@javax.inject.Singleton
public class SomethingcompositeDao extends AbstractAsyncVertxDAO<SomethingcompositeRecord, generated.cf.async.guice.tables.pojos.Somethingcomposite, Record2<Integer, Integer>, CompletableFuture<List<generated.cf.async.guice.tables.pojos.Somethingcomposite>>, CompletableFuture<generated.cf.async.guice.tables.pojos.Somethingcomposite>, CompletableFuture<Integer>, CompletableFuture<Record2<Integer, Integer>>> implements io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO<SomethingcompositeRecord,generated.cf.async.guice.tables.pojos.Somethingcomposite,Record2<Integer, Integer>> {
    @javax.inject.Inject

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param vertx the vertx instance
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public SomethingcompositeDao(Configuration configuration, io.vertx.core.Vertx vertx, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(Somethingcomposite.SOMETHINGCOMPOSITE, generated.cf.async.guice.tables.pojos.Somethingcomposite.class, new AsyncCompletableFutureQueryExecutor<SomethingcompositeRecord,generated.cf.async.guice.tables.pojos.Somethingcomposite,Record2<Integer, Integer>>(configuration,vertx,delegate,generated.cf.async.guice.tables.pojos.Somethingcomposite::new, Somethingcomposite.SOMETHINGCOMPOSITE));
    }

    @Override
    protected Record2<Integer, Integer> getId(generated.cf.async.guice.tables.pojos.Somethingcomposite object) {
        return compositeKeyRecord(object.getSomeid(), object.getSomesecondid());
    }

    /**
     * Find records that have <code>someSecondId IN (values)</code> asynchronously
     */
    public CompletableFuture<List<generated.cf.async.guice.tables.pojos.Somethingcomposite>> findManyBySomesecondid(Collection<Integer> values) {
        return findManyByCondition(Somethingcomposite.SOMETHINGCOMPOSITE.SOMESECONDID.in(values));
    }

    /**
     * Find records that have <code>someSecondId IN (values)</code> asynchronously limited by the given limit
     */
    public CompletableFuture<List<generated.cf.async.guice.tables.pojos.Somethingcomposite>> findManyBySomesecondid(Collection<Integer> values, int limit) {
        return findManyByCondition(Somethingcomposite.SOMETHINGCOMPOSITE.SOMESECONDID.in(values),limit);
    }

    /**
     * Find records that have <code>someJsonObject IN (values)</code> asynchronously
     */
    public CompletableFuture<List<generated.cf.async.guice.tables.pojos.Somethingcomposite>> findManyBySomejsonobject(Collection<JsonObject> values) {
        return findManyByCondition(Somethingcomposite.SOMETHINGCOMPOSITE.SOMEJSONOBJECT.in(values));
    }

    /**
     * Find records that have <code>someJsonObject IN (values)</code> asynchronously limited by the given limit
     */
    public CompletableFuture<List<generated.cf.async.guice.tables.pojos.Somethingcomposite>> findManyBySomejsonobject(Collection<JsonObject> values, int limit) {
        return findManyByCondition(Somethingcomposite.SOMETHINGCOMPOSITE.SOMEJSONOBJECT.in(values),limit);
    }

    @Override
    public AsyncCompletableFutureQueryExecutor<SomethingcompositeRecord,generated.cf.async.guice.tables.pojos.Somethingcomposite,Record2<Integer, Integer>> queryExecutor(){
        return (AsyncCompletableFutureQueryExecutor<SomethingcompositeRecord,generated.cf.async.guice.tables.pojos.Somethingcomposite,Record2<Integer, Integer>>) super.queryExecutor();
    }
}
