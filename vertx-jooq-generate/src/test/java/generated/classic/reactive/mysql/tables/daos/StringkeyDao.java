/*
 * This file is generated by jOOQ.
 */
package generated.classic.reactive.mysql.tables.daos;


import generated.classic.reactive.mysql.tables.Stringkey;
import generated.classic.reactive.mysql.tables.records.StringkeyRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StringkeyDao extends AbstractReactiveVertxDAO<StringkeyRecord, generated.classic.reactive.mysql.tables.pojos.Stringkey, String, Future<List<generated.classic.reactive.mysql.tables.pojos.Stringkey>>, Future<generated.classic.reactive.mysql.tables.pojos.Stringkey>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<StringkeyRecord,generated.classic.reactive.mysql.tables.pojos.Stringkey,String> {

        /**
     * @param configuration Used for rendering, so only SQLDialect must be set
     * and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query
     * execution
     */
        public StringkeyDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
                super(Stringkey.STRINGKEY, generated.classic.reactive.mysql.tables.pojos.Stringkey.class, new ReactiveClassicQueryExecutor<StringkeyRecord,generated.classic.reactive.mysql.tables.pojos.Stringkey,String>(configuration,delegate,generated.classic.reactive.mysql.tables.mappers.RowMappers.getStringkeyMapper()));
        }

        @Override
        protected String getId(generated.classic.reactive.mysql.tables.pojos.Stringkey object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>value IN (values)</code> asynchronously
     */
        public Future<List<generated.classic.reactive.mysql.tables.pojos.Stringkey>> findManyByValue(Collection<Integer> values) {
                return findManyByCondition(Stringkey.STRINGKEY.VALUE.in(values));
        }

        /**
     * Find records that have <code>value IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<generated.classic.reactive.mysql.tables.pojos.Stringkey>> findManyByValue(Collection<Integer> values, int limit) {
                return findManyByCondition(Stringkey.STRINGKEY.VALUE.in(values),limit);
        }

        @Override
        public ReactiveClassicQueryExecutor<StringkeyRecord,generated.classic.reactive.mysql.tables.pojos.Stringkey,String> queryExecutor(){
                return (ReactiveClassicQueryExecutor<StringkeyRecord,generated.classic.reactive.mysql.tables.pojos.Stringkey,String>) super.queryExecutor();
        }

        @Override
        protected java.util.function.Function<io.vertx.sqlclient.RowSet<io.vertx.sqlclient.Row>,Long> extractMysqlLastInsertProperty(){
                return rs -> rs.property(io.vertx.mysqlclient.MySQLClient.LAST_INSERTED_ID);
        }
}
