/*
 * This file is generated by jOOQ.
 */
package generated.mutiny.reactive.mysql.tables;


import generated.mutiny.reactive.mysql.Keys;
import generated.mutiny.reactive.mysql.Vertx;
import generated.mutiny.reactive.mysql.tables.records.StringkeyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stringkey extends TableImpl<StringkeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vertx.stringKey</code>
     */
    public static final Stringkey STRINGKEY = new Stringkey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StringkeyRecord> getRecordType() {
        return StringkeyRecord.class;
    }

    /**
     * The column <code>vertx.stringKey.key</code>.
     */
    public final TableField<StringkeyRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>vertx.stringKey.value</code>.
     */
    public final TableField<StringkeyRecord, Integer> VALUE = createField(DSL.name("value"), SQLDataType.INTEGER.nullable(false), this, "");

    private Stringkey(Name alias, Table<StringkeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stringkey(Name alias, Table<StringkeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vertx.stringKey</code> table reference
     */
    public Stringkey(String alias) {
        this(DSL.name(alias), STRINGKEY);
    }

    /**
     * Create an aliased <code>vertx.stringKey</code> table reference
     */
    public Stringkey(Name alias) {
        this(alias, STRINGKEY);
    }

    /**
     * Create a <code>vertx.stringKey</code> table reference
     */
    public Stringkey() {
        this(DSL.name("stringKey"), null);
    }

    public <O extends Record> Stringkey(Table<O> child, ForeignKey<O, StringkeyRecord> key) {
        super(child, key, STRINGKEY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Vertx.VERTX;
    }

    @Override
    public UniqueKey<StringkeyRecord> getPrimaryKey() {
        return Keys.KEY_STRINGKEY_PRIMARY;
    }

    @Override
    public Stringkey as(String alias) {
        return new Stringkey(DSL.name(alias), this);
    }

    @Override
    public Stringkey as(Name alias) {
        return new Stringkey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stringkey rename(String name) {
        return new Stringkey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stringkey rename(Name name) {
        return new Stringkey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
